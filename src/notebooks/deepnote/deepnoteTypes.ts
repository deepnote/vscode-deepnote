/**
 * Represents a complete Deepnote project structure with metadata, notebooks, and settings.
 */
export interface DeepnoteProject {
    metadata: {
        /** ISO timestamp when the project was created */
        createdAt: string;
        /** ISO timestamp when the project was last modified */
        modifiedAt: string;
    };
    project: {
        id: string;
        name: string;
        notebooks: DeepnoteNotebook[];
        settings: Record<string, unknown>;
    };
    version: string;
}

/**
 * Represents a single notebook within a Deepnote project.
 */
export interface DeepnoteNotebook {
    blocks: DeepnoteBlock[];
    executionMode: string;
    id: string;
    isModule: boolean;
    name: string;
    workingDirectory?: string;
}

/**
 * Represents a single block (cell) within a Deepnote notebook.
 * Can be either a code block or a markdown block.
 */
export interface DeepnoteBlock {
    blockGroup?: string;
    content: string;
    executionCount?: number;
    id: string;
    metadata?: Record<string, unknown>;
    outputs?: DeepnoteOutput[];
    sortingKey: string;
    type: string;
}

/**
 * Represents output data generated by executing a code block.
 */
export type DeepnoteOutput =
    | {
          data?: Record<string, unknown>;
          execution_count?: number;
          metadata?: Record<string, unknown>;
          output_type: 'display_data' | 'execute_result';
          text?: string;
      }
    | {
          name?: string;
          text?: string;
      }
    | {
          name?: string;
          output_type: 'stream';
          text?: string;
      }
    | {
          ename?: string;
          evalue?: string;
          output_type: 'error';
          text?: string;
          traceback?: string[];
      }
    | {
          output_type: string;
          text?: string;
          [key: string]: unknown;
      };

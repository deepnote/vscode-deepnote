/**
 * Represents a complete Deepnote project structure with metadata, notebooks, and settings.
 */
export interface DeepnoteProject {
    metadata: {
        /** ISO timestamp when the project was created */
        createdAt: string;
        /** ISO timestamp when the project was last modified */
        modifiedAt: string;
    };
    project: {
        id: string;
        name: string;
        notebooks: DeepnoteNotebook[];
        settings: Record<string, unknown>;
    };
    version: string;
}

/**
 * Represents a single notebook within a Deepnote project.
 */
export interface DeepnoteNotebook {
    blocks: DeepnoteBlock[];
    executionMode: string;
    id: string;
    isModule: boolean;
    name: string;
    workingDirectory?: string;
}

/**
 * Represents a single block (cell) within a Deepnote notebook.
 * Can be either a code block or a markdown block.
 */
export interface DeepnoteBlock {
    content: string;
    executionCount?: number;
    id: string;
    metadata?: Record<string, unknown>;
    outputReference?: string;
    outputs?: DeepnoteOutput[];
    sortingKey: string;
    type: 'code' | 'markdown';
}

/**
 * Represents output data generated by executing a code block.
 */
export interface DeepnoteOutput {
    data?: Record<string, unknown>;
    ename?: string;
    error?: unknown;
    evalue?: string;
    execution_count?: number;
    metadata?: Record<string, unknown>;
    name?: string;
    output_type: string;
    stack?: string;
    text?: string;
    traceback?: string[];
}
